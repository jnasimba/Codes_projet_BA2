"""ok hugo
ATTRIBUTION DES VALEURS

mh = moteur pince du haut                                         mh = -1  ==> moteur allumé dans sens inverse
mb = moteur pince du bas                                          mb = 0   ==> moteur éteint
mp = moteur principal                                             mp = 1   ==> moteur allumé


deth = detecteur IR du haut                                       deth = 0  ==> detecteur capte rien    (True False ?)
detb = detecteur IR du bas                                        detb = 1  ==> detecteur capte qqch

contacth = detecteur de contact pince haut                        contacth = 1  ==> la pince du haut est accrochée
contactb = detecteur de contact pince bas                         contactb = 0  ==> la pince du bas n'est pas accrochée

contactf = detecteur de contact final (en bas)


Deuxième test

"""

BON_SENS = 1
ARRET = 0
SENS_INVERSE = -1

positionh = 5
positionb = 0


echelle = ['','', '', '', '', '|','', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '',
           '', '', '', '|', '', '', '', '', '_', '|']

echellefixe = ('','', '', '', '', '|','', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '',
           '', '', '', '|', '', '', '', '', '_', '|')



class servomoteur:
    def __init__(self):
        self.angle = 0

    def rotation(self, a):
        self.angle += a




class moteur:
    def __init__(self):
        self.etat = 0

    def tourner(self, sens):
        self.etat = sens

    def stop(self):
        self.etat = ARRET




class capteur:
    def __init__(self, statut, position):
        self.statut = statut
        self.position = position

    def detecte(self):
        if echelle[self.position] == '|':
            return True




class robot:
    def __init__(self):
        self.mp = moteur()
        self.mh = servomoteur()
        self.mb = servomoteur()
        self.cib = capteur(False, positionb)
        self.cih = capteur(False, positionh)
        self.cch = capteur(True, positionh)
        self.ccb = capteur(True, positionb)
        self.ci_haut = capteur(False, positionh + 1)
        self.cc_haut = capteur(False, positionh + 1)
        self.cc_bas = capteur(False, positionb - 1)

    def mouvement_haut(self, n,positionh):
        self.mh.rotation(-90)
        
        echelle[positionh] = 'h'
        printechelle(echelle)
        
        self.mp.tourner(BON_SENS)
        self.ch.position += n
        while not self.ch.detecte():

            echelle[positionh] = 'h'
            echelle[positionh - 1] = echellefixe[positionh - 1]
            printechelle(echelle)
            
            self.ch.positionh += n
            positionh += volt
        self.mp.stop()
        self.mh.rotation(90)
        
        echelle[positionh - 1] = 'H'
        printechelle(echelle)

    def mouvement_bas(self, n,positionb):
        self.mb.rotation(-90)
        
        echelle[positionb] = 'b'
        printechelle(echelle)
        
        self.mp.tourner(BON_SENS)
        self.cb.positionb += n
        while not self.cb.detecte():
            
            echelle[positionb] = 'b'
            echelle[positionb - 1] = echellefixe[positionb - 1]
            printechelle(echelle)
            
            self.cb.positionb += n
        self.mp.stop()
        self.mb.rotation(90)
        
        echelle[positionb - 1] = 'B'
        printechelle(echelle)

    def montee(self):
        while not (self.ci_haut.detecte() or self.cc_haut.detecte()):
            self.mouvement_haut(1,positionh)
            self.mouvement_bas(1,positionb)
        print("Fin de la montée")

    def descente(self):
        while not (self.cc_bas.detecte()):
            self.mouvement_bas(1,positionh)
            self.mouvement_haut(1,positionb)
        print("Fin de la descente")

def printechelle(echelle):
    for i in echelle:
        print(i, end=' ')
        print('\n')
    
    
robot = robot()
robot.montee()
