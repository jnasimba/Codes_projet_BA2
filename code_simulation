"""
ATTRIBUTION DES VALEURS

mh = servomoteur pince du haut                                 on utilise des chiffres pour décrire l'état du moteur (cf les premières lignes de code)
mb = servomoteur pince du bas
mp = moteur principal


cib = capteur infrarouge de la pince du bas
cih = capteur infrarouge de la pince du haut                        la méthode "détecte()" renvoie un booléen (True si le capteur détecte un truc (contact ou proximité))
ci_haut = capteur infrarouge tout en haut

ccb = capteur de contact de la pince du bas
cch = capteur de contact de la pince du bas
cc_haut = capteur de contact tout en haut (pour stopper le mouvement en cas d'obstacle physique)
cc_bas = capteur de contact tout en bas (libération charge)


Deuxième test

"""

BON_SENS = 1
ARRET = 0
SENS_INVERSE = -1

positionh = 5
positionb = 0


echelle = ['','', '', '', '', '|','', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '',
           '', '', '', '|', '', '', '', '', '_', '|']

echellefixe = ('','', '', '', '', '|','', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '', '', '', '', '|', '', '',
           '', '', '', '|', '', '', '', '', '_', '|')



class servomoteur:
    def __init__(self):
        self.angle = 0

    def rotation(self, a):
        self.angle += a




class moteur:
    def __init__(self):
        self.etat = 0

    def tourner(self, sens):
        self.etat = sens

    def stop(self):
        self.etat = ARRET


class capteur_vers_le_haut:
    def __init__(self,statut,position):
        self.statut = statut
        self.position = position
    def detecte(self):
        if echellefixe[self.position] == '_':
            return True





class capteur:
    def __init__(self, statut, position):
        self.statut = statut
        self.position = position

    def detecte(self):
        if echellefixe[self.position] == '|' :
            return True




class robot:
    def __init__(self):
        self.position_haut = positionh
        self.position_bas = positionb
        self.mp = moteur()
        self.mh = servomoteur()
        self.mb = servomoteur()
        self.cib = capteur(False, self.position_bas)
        self.cih = capteur(False, self.position_haut)
        self.cch = capteur(True, self.position_haut)
        self.ccb = capteur(True, self.position_bas)
        self.ci_haut = capteur_vers_le_haut(False, self.position_haut + 1)
        self.cc_haut = capteur_vers_le_haut(False, self.position_haut + 1)
        self.cc_bas = capteur(False, self.position_bas - 1)


    def mouvement_haut(self, n):
        self.mh.rotation(-90)

        echelle[self.position_haut] = 'h'
        print(echelle , "\n")

        self.mp.tourner(BON_SENS)
        self.cih.position += n
        self.ci_haut.position += n
        self.cch.position += n
        self.cc_haut.position += n
        self.position_haut += n

        echelle[self.position_haut] = 'h'
        echelle[self.position_haut - 1] = echellefixe[self.position_haut - 1]
        print(echelle, "\n")
        while not (self.cih.detecte() or self.ci_haut.detecte() or self.cc_haut.detecte()):
            self.cih.position += n
            self.ci_haut.position += n
            self.cch.position += n
            self.cc_haut.position += n
            self.position_haut += n
            echelle[self.position_haut] = 'h'
            echelle[self.position_haut - 1] = echellefixe[self.position_haut - 1]
            print(echelle, "\n")
        self.mp.stop()
        self.mh.rotation(90)

        echelle[self.position_haut] = 'H'
        print(echelle , "\n")

    def mouvement_bas(self, n):
        self.mb.rotation(-90)

        echelle[self.position_bas] = 'b'
        print(echelle , "\n")

        self.mp.tourner(BON_SENS)
        self.cib.position += n
        self.ccb.position += n
        self.cc_bas.position += n
        self.position_bas += n

        echelle[self.position_bas] = 'b'
        echelle[self.position_bas - 1] = echellefixe[self.position_bas - 1]
        print(echelle, "\n")
        while not (self.cib.detecte()):
            self.cib.position += n
            self.ccb.position += n
            self.cc_bas.position += n
            self.position_bas += n
            echelle[self.position_bas] = 'b'
            echelle[self.position_bas - 1] = echellefixe[self.position_bas - 1]
            print(echelle, "\n")
        self.mp.stop()
        self.mb.rotation(90)

        echelle[self.position_bas] = 'B'
        print(echelle , "\n")

    def montee(self):
        while not (self.ci_haut.detecte() or self.cc_haut.detecte()):
            self.mouvement_haut(1)
            self.mouvement_bas(1)
        print("Fin de la montée")

    def descente(self):
        while not (self.cc_bas.detecte()):
            self.mouvement_bas(1)
            self.mouvement_haut(1)
        print("Fin de la descente")



robot = robot()
robot.montee()
